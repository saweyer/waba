// WabaTester versionconstant kWabaTester 	:= "WabaTester";constant kFileName 		:= "wbtst";constant kVersionNum 	:= "1.0";constant kVersionInt	:= "10";constant kBetaVersion 	:= "o";// TO DO & RECENT CHANGES: moved to changes.txt// =========Print(kFileName & kVersionInt & kBetaVersion & ".pkg");DefineGlobalConstant('kAppTitle, kWabaTester && kVersionNum & kBetaVersion);Print(kAppTitle && DateNTime(Time()));Print([kAppName, kAppSymbol, kPackageName]);	// kPackageName used in :getPkgItemsDefineGlobalConstant('kWabaTesterSym, kAppSymbol);// =====DefineGlobalConstant('kClassEntry, { // format used in :setAppClasses	//name: /*string*/	nil,	not needed	class:  /*binary*/ 	nil,		offset: /*int*/		nil,	length: /*int*/		nil,});DefineGlobalConstant('kFileEntry, { // format for builtinFiles, inboxFiles, pkgFiles	appName:	/*string*/ 	nil,	appArgs: 	/*object*/	nil,	// string,frame,entryAlias,nil	appClasses: /*binary*/ 	nil,		appFormat: 	/*symbol*/	nil,	//appContext:	//appMainName:});DefineGlobalConstant('kFileEntrySort, /*int*/ func(/*fileEntry*/ entry1, /*fileEntry*/ entry2)begin	local int strcomp := StrCompare(entry1.appName, entry2.appName);	if strcomp=0	then SymbolCompareLex(entry1.appFormat, entry2.appFormat)	else strcomp;end);// file formatsDefineGlobalConstant('kPDB,		'pdb);	// PalmDefineGlobalConstant('kWRP, 	'wrp);	// WinCEDefineGlobalConstant('kJAR, 	'jar);	// JarDefineGlobalConstant('kCLASS, 	'class);// class(single)DefineGlobalConstant('kNTK, 	'ntk);	// ntk-generatedDefineGlobalConstant('kPKG, 	'pkg);	// Warp/Exegen-generated	!!!oDefineGlobalConstant('kFormats, [kJAR, kCLASS, kWRP, kPDB, kNTK, kPKG]); // used in getPkgItems  !!!o// file/header signaturesDefineGlobalConstant('kWarpSig,   "Wrp1");DefineglobalConstant('kJarLocSig, "PK\u00030004");DefineglobalConstant('kJarCenSig, "PK\u00010002");DefineglobalConstant('kJarEndSig, "PK\u00050006");DefineGlobalConstant('kBMPSig, 	  "BM");DefineGlobalConstant('kClassSig,  "\uCAFEBABE");// file offset infoDefineGlobalConstant('kFileSig,   {pdb: kWarpSig, wrp: kWarpSig, jar: kJarEndSig});DefineGlobalConstant('kFileSigPos,{pdb: 60, wrp: 0, jar: -22});	// kFileSig pos inside pdb,wrp,jarDefineGlobalConstant('kNumRecPos, {pdb: 76, wrp: 6, jar: -12});	// numRec pos (word) within fileDefineGlobalConstant('kRecPos, 	  {pdb: 78, wrp: 8, jar: 0});	// 1st rec pos (long)DefineGlobalConstant('kRecOffset, {pdb:  8, wrp: 4, jar: 30});	// rec size incrementDefineGlobalConstant('kLOCHDR,	  30); // .jar  header lengthDefineGlobalConstant('kPRCArgPos, 1219);DefineGlobalConstant('kPRCIconPos,1512);// file extensions/namesDefineGlobalConstant('kClassExt, 	".class");DefineGlobalConstant('kClassExtLen, StrLen(kClassExt));DefineGlobalConstant('kBMPExt, 		".bmp");DefineGlobalConstant('kWBMExt, 		".wbm");	// e.g., MajongDefineGlobalConstant('kHTMExt, 		".htm");DefineGlobalConstant('kIconName, 	"icon.bmp");DefineGlobalConstant('kIconSym, 	Intern(kIconName));DefineGlobalConstant('kIconProName, "iconPro.bmp");	// !!!o// see getInboxItems. important conventions: ARGS=even(any len ok), CLASSES=odd(all 3 letters)DefineGlobalConstant('kWabaExts, [	".lnk",  ".wrp",	".prc",  ".pdb",	kHTMExt, ".jar",	// or .class	".html", kClassExt,	// or .jar]);// Waba VMDefineGlobalConstant('kWabaVMName,		"vm:waba");				// for getPkgItemsDefineGlobalConstant('kWabaVMSymbol,	Intern(kWabaVMName));	// for appLaunchDefineGlobalConstant('kWabaAppSig,		":waba");	// also used in getPkgItemsDefineGlobalConstant('kWabaLibName, 	"waba");	// w/o :waba suffixDefineGlobalConstant('kWabaLibSymbol, 	Intern(kWabaLibName));	// w/o :waba suffixDefineGlobalConstant('kWabaEmptyGlobal, { // ?? share w/ Waba VM?	lib: {},});			constant kExtrasSym := 'ExtrasDrawer;// NewtPack (saving app/autopart packages)DefineGlobalConstant('kNewtSymbol, '|NewtDevEnv:TKnollSys|);	// for NewtPackDefineGlobalConstant('kGetResource, /*frame*/ func(/*string*/ name)begin	local rf := OpenResFileX(HOME & kWabaTester & ".rsc");	local icon := GetPictAsBits(name,nil);	CloseResFileX(rf);	icon;end);DefineGlobalConstant('kWabaIconAddW, call kGetResource with ("WabaAppInsert"));//Write("kWabaIconAddW: "); Print(kWabaIconAddW.bounds);// === are shared statically via WabaTester.afterScript// *** are copied dynamically during WabaTester.savePkgDefineGlobalConstant('kNewtPackApp, { // for a regular Waba appviewClass:  clView,viewFlags:  0, viewFormat: 0, viewBounds: SetBounds(0,0,0,0), viewSetupFormScript: func()	// === WabaTester.appLaunchnil,viewQuitScript: func() 		// === WabaTester.appShutdownnil,VMExited: func(wvm)			// === WabaTester.VMExitednil,vm: nil,//oldInfo: nil,		//***. see appLaunch, appShutdown, savePackage//newInfo: {icon: call kGetResource with ("WabaAppOpen")},getResource:  nil,		// === WabaTester.getResourcegetWabaClass: nil,		// === WabaTester.getWabaClass//setAppContext:nil,	// was copied from WabaTester.setAppContext, but now called from lib/waba// copied via WabaTester:savePkgappArgs:	nil,	//***appClasses:	nil,	//***appContext:	nil,	//***appFormat: 	nil,	//***appMainName:nil,	//***appName: 	nil,	//***appRequires:nil,	//*** !!!nappSymbol: nil,		//***// for NewtPack_package: {	shortTitle: nil,		//***	copyright:	nil,		//***	//compressed: 'faster,	//??	icon: call kGetResource with ("WabaAppIcon"),	//***	DeletionScript: nil,	//***	},});//Print(kNewtPackApp._package.icon.bounds);DefineGlobalConstant('kNewtPackAuto, { // for a library extension, e.g., lib/wabaappSymbol: nil,				//***// for NewtPack_package: {	shortTitle: nil,		//***	copyright:	nil,		//***	//compressed: 'faster,	//??	icon: call kGetResource with ("WabaLibIcon"),	partData: {		// copied from WabaTester in SavePkg		//appArgs:	nil,	//unneeded		appClasses:	nil,	//***		appContext:	nil,	//***		appFormat: 	nil,	//***		//appMainName: 	nil,//unneeded		appName: 	nil,	//***		//appRequires:  nil,//???		//getResource:  nil,//unneeded		//getWabaClass: nil,//unneeded		//setAppContext:nil,//*** for lib/waba only		},	InstallScript: /*void*/ func(/*frame*/ partFrame, /*frame*/ removeFrame)	begin		// stash a reference in the global:		local /*frame*/ gData := GetGlobalVar(kWabaVMSymbol), partData := partFrame.partData;		local /*symbol*/ libSym := Intern(partData.appName); // w/o :waba		if not gData		then DefGlobalVar(EnsureInternal(kWabaVMSymbol), gData := EnsureInternal(kWabaEmptyGlobal));		if gData.lib.(libSym)		then GetRoot():Notify(kNotifyAlert, EnsureInternal("Waba Lib"), "name confict:" && libSym);		else begin			gData.lib.(libSym) := partData;			removeFrame.libSym := libSym;			end;		end,	RemoveScript: /*void*/ func(/*frame*/ removeFrame)	begin		RemoveSlot(GetGlobalVar(kWabaVMSymbol).lib, removeFrame.libSym);		// no gData or already removed??	end,	},});// ==========// Newt's Cape helperAppDefineGlobalConstant('kNewtsCapeSymbol, '|NewtsCape:NewtsCape|);DefineGlobalConstant('kNewtsCapeEmptyGlobal, {	cache: [], historyPos: 0,				htmlApps: {}, helperApps: {},	imageExtensions: [".gif"],	protos: {},	}); DefineGlobalConstant('kWabaMediaTypes, [	//??"text/plain", "*/*",	"application/octet-stream", "chemical/x-pdb",	"application/x-pilot-pdb",	//?? "application/x-pilot-prc", //.prc	"application/x-palmpilot", "application/x-pilot",	"application/java",	//.class	"application/zip-compressed",	//.jar	// ??.wrp,.lnk	]);// basically same as kWabaExt except just 'class' (not arg) files??DefineGlobalConstant('kWabaMediaExt, [".pdb", ".wrp", ".jar", ".class"]); // .prc, .lnk??DefineGlobalConstant('kHelperFrame, {transferMode: 'binary,extensions:   kWabaMediaExt,matchFile: /*boolean*/ func(/*string*/ url, /*binary*/ data) // for Inbox testingbegin	local int pos := LSearch(extensions, url, 0, GetGlobalFn('EndsWith), nil);	return pos and GetRoot().(kAppSymbol):checkFileSig(data, Intern(Substr(extensions[pos],1,nil)), nil);end,addFile: /*boolean*/ func(/*string*/ contentType, /*string*/ url, /*binary*/ data, /*frame*/ options)begin	local int pos := LSearch(extensions, url, 0, GetGlobalFn('EndsWith), nil);	if not pos	then return NIL;	if not options	then options := {};	// !!!n	local int i, ulen := StrLen(url), elen := StrLen(extensions[pos]); // incl .	local /*symbol*/ format := Intern(Substr(extensions[pos],1,nil));	pos := 0;	for i := ulen-elen to 0 by -1	do  if url[i] = $/		then break pos := i+1;//Print(url); Print(options);	local /*app*/ wabaTester := GetRoot().(kAppSymbol);	wabaTester:open();	AddDeferredSend(wabaTester, 'setAppClasses,		[Substr(url, pos, ulen-elen), data, options.appArgs, format, nil, options.appClass, options.appRequires]); // !!!n	TRUE; // return immed to allow some cleanupend,});DefineGlobalConstant('kInstallHelperApp, /*void*/ func(/*string*/ contentType, /*symbol*/ sym, /*frame*/ helperApp)if GetRoot().(kNewtsCapeSymbol)	// use built-in installHelperApp if therethen GetRoot().(kNewtsCapeSymbol):installHelperApp(contentType, sym, helperApp)else begin	local /*frame*/ gData := GetGlobalVar(kNewtsCapeSymbol);	if not gData	then DefGlobalVar(kNewtsCapeSymbol, gData := EnsureInternal(kNewtsCapeEmptyGlobal)); 	local /*frame*/ helperApps := gData.helperApps;	local /*symbol*/ icontentType := Intern(contentType);	local /*frame*/ helperFrame := helperApps.(icontentType); 	if isFrame(helperApp)	then begin // install		if not helperFrame then		helperApps.(EnsureInternal(icontentType)) := helperFrame := EnsureInternal({});		// assume in this version that helperApp has 'addFile		helperFrame.(EnsureInternal(sym)) := helperApp; // add/replace		end	else if helperFrame and Length(RemoveSlot(helperFrame,sym))=0	then RemoveSlot(helperApps, icontentType); // un-install	end;);InstallScript := func(partFrame)begin	local /*string*/ contentType;	foreach contentType in kWabaMediaTypes	do call kInstallHelperApp with (contentType, kAppSymbol, kHelperFrame);end;RemoveScript :=	func(partFrame)begin	local /*string*/ contentType;	foreach contentType in kWabaMediaTypes	do call kInstallHelperApp with (contentType, kAppSymbol, nil);end;// =========// MISC/UTILS// for infoParaDefineGlobalConstant('kScrollLines, 4);DefineGlobalConstant('kIndent, "  ");DefineGlobalConstant('kByteBeginsWith, /*boolean*/ func(/*binary*/ bytes, /*string*/ str, int offset)begin	local int i, slen := StrLen(str), blen := Length(bytes);	if offset < 0	then offset := blen+offset;	if offset < 0 or offset+slen > blen	then return NIL;	for i := 0 to slen-1	do if ExtractChar(bytes, offset+i) <> str[i]		then return NIL;	TRUE;end);DefineGlobalConstant('kExtractString, /*String*/ func(/*binary*/ data, int offset, int len) // packed asciibegin	local int i, dlen := Length(data);	if len = nil	then len := dlen-offset	else if offset+len > dlen	then return "";	local s := MakeBinary((len*2)+2, 'string);	for i := 0 to len-1	do StuffByte(s, (i*2)+1, ExtractByte(data, offset+i));	s;end);DefineGlobalConstant('kSetBytes, /*binary*/ func(array abytes)begin	local int i, blen := Length(abytes);	local /*binary*/ bbytes := MakeBinary(blen, 'binary);	for i:=0 to blen-1	do StuffByte(bbytes, i, abytes[i]);	bbytes;end);// replace with compile-time MakeBinaryFromHex(str, type) w/o /u/*DefineGlobalConstant('kFixBinaryType, func (ustr, type)	SetClass(SetLength(ustr,Length(ustr)-2), type) // fix class, get rid of null);*/DefineGlobalConstant('kDefaultPRCIcon1, call kSetBytes with ('[ // from PrcFile.java	0,   0,   0, 0,	0,   0,   0, 0,	0,   0,   0, 0,	0,   3, 192, 0,    0,  15, 240, 0,    0,  31, 248, 0,    0,  63, 252, 0,    0, 127, 254, 0,    0,  79, 242, 0,    0, 207, 243, 0,    0, 206, 115, 0,    0, 198,  99, 0,    0, 228,  39, 0,    0,  97, 134, 0,    0, 113, 142, 0,    0,  59, 220, 0,    0,  31, 248, 0,    0,  15, 240, 0,    0,   3, 192, 0,    0,   0,   0, 0,    0,   0,   0, 0,    0,   0,   0, 0,    ]));DefineGlobalConstant('kDefaultPRCIcon2, MakeBinaryFromHex( // mostly black, e.g., skey.prc	"07FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE007FFFFE0",	'binary));constant kHeadlen1x := 16;constant kHeadlen2x := 28;DefineGlobalConstant('kSetBitmapSize, /*void*/ func(/*bitmap*/ bitmap, int width, int height)begin	local /*binary/frame*/ bnds := bitmap.bounds;	local /*binary*/ bits := bitmap.data;	if IsBinary(bnds) // 2.x	then begin		StuffWord(bnds, 4, height);		StuffWord(bnds, 6, width);		end	else begin		bits := bitmap.bits;		bnds.bottom := height;		bnds.right  := width;		end;	StuffWord(bits, 12, height);	StuffWord(bits, 14, width);end);DefineGlobalConstant('kShapeBounds, /*frame*/ func(/*bitmap*/ bitmap)if bitmapthen begin	local bnds := bitmap.bounds;	if IsFrame(bnds) // and bitmap.bits	then bnds	else ShapeBounds(bitmap);	// 2.x	end);DefineGlobalConstant('kMakeBitmap, /*bitmap*/ func(int width, int height, /*frame*/ options, /*boolean*/ icon)if iconthen begin // 1.x-compatible format (and for 2.0 Extras icon)	local int depth := options.depth;	if depth <> 1	then begin		GetRoot():Notify(kNotifyAlert, EnsureInternal(kWabaTester), "1.x depth:" && depth);		return NIL;		end;	local int rowBytes := options.rowBytes;	if not rowBytes	then rowBytes := 4*((width + 31) div 32);	local /*binary*/ bits := MakeBinary(kHeadlen1x + (rowBytes*height), 'bits);	StuffWord(bits,  4, rowBytes);	StuffWord(bits, 12, height);	//8=top(0),10=left(0)	StuffWord(bits, 14, width);	{	bounds: RelBounds(0, 0, width, height),	bits: bits,	};	endelse if GetGlobalFn('MakeBitmap) // 2.x runtimethen MakeBitmap(width,height,options)else begin // 2.x but probably build time (e.g., WabaNewApp)	local /*binary*/ bits;	local int depth := options.depth;	if not depth	then depth := 1;	local int rowBytes := options.rowBytes;	if not rowBytes	then rowBytes := 4*((width*depth + 31) div 32);		local /*frame*/ bitmap := {		class: 'bitmap,		bounds: MakeBinary(8, 'boundsrect),		data: 	bits := MakeBinary(kHeadlen2x + (rowBytes*height), 'pixels), // assume padded already		colordata: NIL,		mask: 	NIL,		};	local /*int,int[]*/ res := options.resolution;	if not res	then res := 72;		// fix header   	StuffWord(bits,  2, kHeadlen2x);// scanOffset	StuffWord(bits,  4, rowBytes);	call kSetBitmapSize with (bitmap, width, height);    StuffByte(bits, 16, 128);		// ?    StuffByte(bits, 18,  16);		// ?    StuffByte(bits, 19, depth); 	StuffWord(bits, 22, if IsArray(res) then res[0] else res);	// resX 	StuffWord(bits, 24, if IsArray(res) then res[1] else res);	// resY 	bitmap;	end);constant kByteSize :=   256;constant kWordSize := 65536;// BMP,JAR seems to use little-endian rather than big-endian for header fieldsDefineGlobalConstant('kExtractRWord, /*int*/ func(/*binary*/ data, int offset)begin	local int byte1 := ExtractByte(data, offset+1), byte2 := ExtractByte(data, offset);	if byte1=0	then byte2	else (byte1*kByteSize) + byte2;end);DefineGlobalConstant('kExtractRLong, /*long*/ func(/*binary*/ data, int offset)begin	local int word1 := call kExtractRWord with (data, offset+2);	local int word2 := call kExtractRWord with (data, offset);	if word1=0	then word2	else (word1*kWordSize) + word2;end);// e.g., to compare against known classfile. like BinEqual but for rangesDefineGlobalConstant('kByteEqual, /*boolean*/ func(/*binary*/ bytes1, int offset1, int len1, /*binary*/ bytes2, int offset2, int len2)if len1=len2then begin	local int i;	for i := 0 to len1-1	do if ExtractByte(bytes1, offset1+i) <> ExtractByte(bytes2, offset2+i)		then return NIL;	TRUE;	end);// =====// only used for debuggingDefineGlobalConstant('kFindInboxItem, /*entry*/ func(/*string*/ title)begin	local cursor := GetUnionSoup(ROM_inboxsoupname):?Query(nil);	local entry := cursor:?entry(), etitle;	while entry	do  if isFrame(entry.body) and IsString(etitle := entry.body.title) and StrEqual(etitle, title)		then return entry		else begin			entry := NIL;			entry := cursor:next();			end;end);DefineGlobalConstant('kBytePos, /*int*/ func(/*binary*/ bytes, /*string*/ str, int offset) // unusedif StrLen(str) > 0then begin	local int i, j, slen := StrLen(str), ch0 := str[0];	local /*boolean*/ match;	for i := offset to Length(bytes)-slen	do  if ExtractChar(bytes,i) = ch0		then begin			match := true;			for j:=1 to slen-1			do  if ExtractChar(bytes,i+j) <> str[j]				then break match := NIL;			if match			then return i;			end;	NIL;	end);