/*# =========== Header ===========# File:					Changes# Project:				Waba# Purpose:				Waba Project (NCT module and Application) change history## Created on:			12/29/2000# ===========# Most recent first.4 (Beta)	[Sean]--------Added some Newton Exception protections so we can catch and announce exceptions	that crop up rather than the current situation (producing weird Waba errors ;-)Modified newton_catch(ALL_EXCEPTIONS) to simply newton_catch_all in newtonAPIBecause the exception protection makes Waba go a bit slower, set up all the protection	under a debug flag: CATCH_NEWTON_EXCEPTIONS which is by default turned off.	See nmnewt_a.cpFixed a memory leak in 3 Beta caused by not deleting refstructs created for drawing.	Oops!  This will dramatically improve WaGo's leaking for example.Fixed a minor bug in the Soup->Catalog code which was breaking CatalogDelete.Fixed some exception-handling bugs (I hope) in the Soup->Catalog code.3 (Beta)	[Sean&Steve]--------Added native versions of drawRect and drawPolygon, to speed them up.	I've proposed a great deal more drawing ops to the Waba core group,	but that comes later.Fixed the up/down keys to output the right valuesAdded Steve's modifications to allow for reading catalogs straight out of PDB files.	This made possible the Dict and WordBox applicationAdded Steve's new wababin code which fixes some bugs in reading bitmapsIf an application asks for a larger width AND height than the machine can provide, not	only do we only give it the width asked for, but we also change the window style so	the protoDragger window border and drag circle go away.  This makes Asteroids and	PacMan nice.Added a new method Callback.sendInherited(...) which calls inherited NS functions.	This replaces an earlier attempt (also in Beta 3 but removed) called	NS.inheritedScriptProvider() which was a big nasy hack to do something similar.Removed a few debug statements that were printing out to the InspectorFixed little bug in Writing window where pressing return button with an empty text field	generated an error.2 (Beta)	[Sean]--------Changed SetRemove -> FixedSetRemove (I've had big problems with SetRemove in NOS)	Not a big deal to convert it to a hard-coded function anyway, might as well...Waba now provides as big a window as it can, if the app is requesting it.1 (Beta)	[Sean&Steve]--------Added Steve's latest wababin0.60	[Paul]----Added native sockets support.Changed the thres parameter of TEndpoint::Rcv from 0 to 1 in NewtSerial.cp (dunno	what it does, but it's how the system does it).The TEndpoint object is now closed before being deleted (not sure it's really useful).Removed some debug code in copyArray function.Added Hammer debug support (cf Waba.cp) and some new debug macros (untested).Harri's name takes two r's (changed in the about box).NS debug is now set to project debug checkbox.Added the event queue so the VM is no longer called from several forked instance of the	NS task. This doesn't fix the Waba alert bug (when tapping repeatdly on Waving Duke set	to copy buffer) but it does fix the receive bytes problem in the sockets.0.59	[Sean and Steve]----Made various Ref and NS functions protected to protect the innocent.Modified the Ref's call and send functions so that when an exception is raised,	they return the exception value instead of bombing like they do now.  :-)Deleted the extraneous MainWindow fileHeavily documented the NSWabaAPI, other documentationMerged in Steve's Socket codeRewrote all the Catalog functions AGAIN after I [Sean] accidentally, er, deleted themFixed bugs in the C++ glue functions for SocketDestroy and some Catalog stuffTurned newtonType back onAdded some debugging functions and version information to the NS objectAs of Beta 1 we will start using a new versioning system that increases by 1	each time -- that way the version information in the NS object will be accessible	in a reasonable fashion to Waba applications.Fixed a bug in Vm.getClassName0.58 	[Sean]----Fixed some unicode<->utf8 errors in the Waba VM's core code.  Reported the errors	(and they're bad) to the core waba list for other waba implementations.Added CatalogListCatalogsAdded CatalogCreate (and subsidiary functions) to implement Waba's waba.io.Catalog APIFixed bug in Quit that Victor Rehorst had notedAdded Paul, Hari, and Victor to the Contributors List in the About box.0.57	[Sean and Paul]----Merged Sean's and Paul's code.  	We need to add Paul (and maybe ultimately Victor and Hari) to the About box.	Not tonight though, too tired.Added Object.hashCode, Object.equals, VM.getClassName, and VM.makeInstance 	native methods, which make possible some simple dynamic loading, and	implement Java's equals and hashCode methods.  They're totally untested.Modified the MethodsHash.java file so that it prints out our tables automagically.First round of testing of NSWabaAPI done.  Works great.  Included new newton classes,	testing apps (NewtonHelloWorld, NewtonButtonExample).Included simple benchmark program: WabaMark.  Need more benchmarks though, including	ones that draw on the screen (WabaMark just does raw performance measurements). NSPlatform class is now just the NS class.Added some functionality to the NS class to make it more fun to use.Generally cleaned up directory structure.0.56	[Paul]----Included changes introduced in 0.511:	Replaced the code to check which model we're running on in NewtonScript by C++ code.	The C++ project now links with all libraries (hence the linker will do a lot of warnings) just to link with DDK libraries.	* Note: you can have much less warnings if you merge the two Newton libraries into a single one as I did.Added native Serial support.copyArray no longer complains if one of the arrays is null but just return false as the doc says it should.    0.55	[Sean & Steve]----refClass and callbackClass are now determined lazily, rather than 	    loaded before the app itself.Added NSPlatform class, for general access to NS stuff via Waba.soundTone function added.  Unfortunately, apparent bugs in the NOS	2.1 synthesizer cause successive tones to get progressively slower	and slower and slower -- it looks like the C++ heap isn't freed	right.  So sound tones have been disabled (see the	produceSoundTones constant).NOS 2.1 protos added.  This bumps our compressed size to over 100K :-(	These were added to allow NewtonScript API users to have access to	magic pointer they'd otherwise not be able to access.  13K, ick!Removed the SoundTone and SoundClip methods from the VMWin window.Fixed Paul Guyot's noted bugs in buffered windows which were causing them	to not properly update (due to clipping errors).Fixed bug which was causing apps to lose their timers when they were hidden.Changed doDrawingOnEvent from a constant to a preference.  This necessitated	some hijinks because Waba apps start drawing immediately, long before even	the unique symbol has been determined (to look up the preference!).  The	net results: (1) apps will NOT do DoDrawing on event until their first event	or so, and (2) this won't be an option in the options frame -- it'll have	to be on a per-preference basis, sorry.  The reason for this change is that	Steve noted clipping problems with his multiple windows (for the Serial	and Socket code).  As noted earlier in the 0.52 changes, this is an 	expected result.  So I'm making it user-settable, since it really does	make a major speed difference for some apps to have this feature available,	even if it does mess up multiple window stuff.0.54	[Sean & Steve]----Addition of first version of NewtonScript API.  The API will not	be functional without an accompanying Java library, which Steve	needs to compile for me at some point.  This necessitated a bunch	of new native functions added to the VM, which I had to figure	out the hash values for (hope I did it right!).  I also had to	add a new access C function from NewtonScript to send callback	methods to the newton.Callback Java class in the API.  It's a	big hack and I may have broken some things.  All the new native	functions may also slow things down a tiny bit, though I've not	noticed really.Modified executeMethod(...) so that you can get the return value.Modified getClass(...) so that you don't necessarily issue an error	and die if the class can't be located.  The new version is called	getClassMaybe(...).Added NewtonScript access methods for nearly all of the remaining	stub functions.  This will enable Steve to work on these functions	in NewtonScript instead of in C++, I can continue to stomp bugs.With all the new native funtions 'n stuff, our executable is much	bigger now.  Hope that's okay with everyone.Fixed two bugs (in font usage and cursors) which Steve Weyer noted.	I've not yet nailed down the bugs that Paul Guyot has mentioned	regarding WavingDuke not drawing when the window is buffered	and being unable to get a screenshot of WavingDuke in action...0.53	[Sean & Steve]----Slight modification of the "controls" keyboardScroll arrows and belly button now do PageUp/PageDown/Menu(Hopefully) correctly accepts screen size and heap/stack size 	requests from appClass pointers now stored in a NewtonScript array rather than	a C++ array (saves a little space)0.52	[Sean & Steve]----Did a few things to speed drawing up a little:	1. 	Clip generation is now done lazily at draw-time rather 		than when the Java app requests a clip	2. 	The doDrawingAtEventTime flag (by default ON) controls 		whether or not we call :DoDrawing() when we get an event		or when we redraw.  I figured there's lots of drawing per		event, so why call :DoDrawing() over and over?  This may		cause problems if we want to toss up multiple windows tho.Text input done with:		- keyboard		- special "controls" keyboard		- text input line (for 2.0 users)		- switch to "recognition" mode for windowVarious minor bug fixes0.51	[Sean & Steve]----Original Alpha release by Sean Luke and Steve Weyer*/