// =========== Header ===========// File:				NIE.cp// Project:				(Library)// Written by:			Paul Guyot (pguyot@kallisys.net)//// Created on:			06/02/2001// Internal version:	1//// Copyright:			й 2001 by Paul Guyot.// 						All rights reserved worldwide.// ===========// =========== Change History ===========// 06/02/2001	v1	[PG]	Creation of the file// ===========// NIE APIs are defined in this file (and the .h file)// We have://	Various constants for NIE//	Options objects for NIE#ifndef __NIE__	#include <NIE.h>#endif#ifndef __string_h	#include <string.h>#endif// ============================ ////   еееее NIE Options еееее    //// ============================ //// Following comments apply to every option class:// Option constructors basically set the default values as defined in the .h. If// the default value isn't defined there, it's defined here. They also set the// option label.// Accessors here are just methods to copy the IP. Meaning of the variables are// defined in the .h.#pragma mark *--- Inet Tool Expedited Next Byte Transfer ('iexn') Option ---*// --------------------------------------------------------	////	TITOExpeditedNextByteTransfer( void )// --------------------------------------------------------	//TITOExpeditedNextByteTransfer::TITOExpeditedNextByteTransfer( void )	:		TOption(){	SetLabel( kOptionID );	SetLength( kOptionDataLength );}#pragma mark *--- Inet Tool Expedited Data Transfer ('iexp') Option ---*// --------------------------------------------------------	////	TITOExpeditedDataTransfer( void )// --------------------------------------------------------	//TITOExpeditedDataTransfer::TITOExpeditedDataTransfer( void )	:		TOption(),		mByte( kByteDefault ){	SetLabel( kOptionID );	SetLength( kOptionDataLength );}#pragma mark *--- Inet Tool Physical Link Identifier ('ilid') Option ---*// --------------------------------------------------------	////	TITOPhysicalLinkIdentifier( void )// --------------------------------------------------------	//TITOPhysicalLinkIdentifier::TITOPhysicalLinkIdentifier( void )	:		TOption(),		mLinkID( kLinkIDDefault ){	SetLabel( kOptionID );	SetLength( kOptionDataLength );}#pragma mark *--- Inet Tool Local Port ('ilpt') Option ---*// --------------------------------------------------------	////	TITOLocalPort( void )// --------------------------------------------------------	//TITOLocalPort::TITOLocalPort( void )	:		TOption(),		mPortNumber( kPortNumberDefault ),		mUseDefault( kUseDefaultDefault ){	SetLabel( kOptionID );	SetLength( kOptionDataLength );}#pragma mark *--- Inet Profile ('iprf') Option ---*// --------------------------------------------------------	////	TITOProfile( void )// --------------------------------------------------------	//// Also set addresses to 0,0,0,0.TITOProfile::TITOProfile( void )	:		TOption(){	SetLabel( kOptionID );	SetLength( kOptionDataLength );	int index_i;	// Counter on IP bytes	for (index_i = 0; index_i < 4; index_i++)	{		mLocalHostIP[index_i] = 0;		mGatewayHostIP[index_i] = 0;	}}// --------------------------------------------------------	////	GetLocalHostIP( UChar [4] )// --------------------------------------------------------	//// Retrieve the local host IP. Copy it from the option data.voidTITOProfile::GetLocalHostIP( UChar outLocalHostIP[4] ){	// I simply call memcpy. Both arrays are not very likely to overlap.		(void) ::memcpy( outLocalHostIP, mLocalHostIP, sizeof( outLocalHostIP ) );}// --------------------------------------------------------	////	GetGatewayHostIP( UChar [4] )// --------------------------------------------------------	//// Retrieve the gateway host IP. Copy it from the option data using memcpy.voidTITOProfile::GetGatewayHostIP( UChar outGatewayHostIP[4] ){	(void) ::memcpy( outGatewayHostIP, mGatewayHostIP, sizeof( outGatewayHostIP ) );}#pragma mark *--- Inet Tool TCP Remote Socket ('itrs') Option ---*// --------------------------------------------------------	////	TITOTCPRemoteSocket( void )// --------------------------------------------------------	//// Also set remote host IP to 0,0,0,0.TITOTCPRemoteSocket::TITOTCPRemoteSocket( void )	:		TOption(),		mRemoteHostPort( kRemoteHostPortDefault ){	SetLabel( kOptionID );	SetLength( kOptionDataLength );	int index_i;	// Counter on IP bytes	for (index_i = 0; index_i < 4; index_i++)	{		mRemoteHostIP[index_i] = 0;	}}// --------------------------------------------------------	////	GetRemoteHostIP( UChar [4] )// --------------------------------------------------------	//// Retrieve the gateway host IP. Copy it from the option data using memcpy.voidTITOTCPRemoteSocket::GetRemoteHostIP( UChar outRemoteHostIP[4] ){	(void) ::memcpy( outRemoteHostIP, mRemoteHostIP, sizeof( outRemoteHostIP ) );}// --------------------------------------------------------	////	SetRemoteHostIP( const UChar [4] )// --------------------------------------------------------	//// Set the gateway host IP. Copy it to the option data using memcpy.voidTITOTCPRemoteSocket::SetRemoteHostIP( const UChar inRemoteHostIP[4] ){	(void) ::memcpy( mRemoteHostIP, inRemoteHostIP, sizeof( mRemoteHostIP ) );}#pragma mark *--- Inet Tool Transport Service Type ('itsv') Option ---*// --------------------------------------------------------	////	TITOTransportServiceType( void )// --------------------------------------------------------	//TITOTransportServiceType::TITOTransportServiceType( void )	:		TOption(),		mServiceType( kServiceTypeDefault ){	SetLabel( kOptionID );	SetLength( kOptionDataLength );}#pragma mark *--- Inet Tool UDP Destination Socket ('iuds') Option ---*// --------------------------------------------------------	////	TITOUDPDestinationSocket( void )// --------------------------------------------------------	//// Also set the destination IP to 0,0,0,0. (kDestinationIPDefault)TITOUDPDestinationSocket::TITOUDPDestinationSocket( void )	:		TOption(),		mDestinationPort( kDestinationIPDefault ){	SetLabel( kOptionID );	SetLength( kOptionDataLength );	int index_i;	// Counter on IP bytes	for (index_i = 0; index_i < 4; index_i++)	{		mDestinationIP[index_i] = kDestinationIPDefault >> (index_i * 8);	}}// --------------------------------------------------------	////	GetDestinationIP( UChar [4] )// --------------------------------------------------------	//// Retrieve the destination IP. Copy it from the option data using memcpy.voidTITOUDPDestinationSocket::GetDestinationIP( UChar outDestinationIP[4] ){	(void) ::memcpy( outDestinationIP, mDestinationIP, sizeof( outDestinationIP ) );}// --------------------------------------------------------	////	SetDestinationIP( const UChar [4] )// --------------------------------------------------------	//// Set the destination IP. Copy it to the option data using memcpy.voidTITOUDPDestinationSocket::SetDestinationIP( const UChar inDestinationIP[4] ){	(void) ::memcpy( mDestinationIP, inDestinationIP, sizeof( mDestinationIP ) );}#pragma mark *--- Inet Tool UDP Source Socket ('iuss') Option ---*// --------------------------------------------------------	////	TITOUDPSourceSocket( void )// --------------------------------------------------------	//// Also set the source IP to 0,0,0,0.TITOUDPSourceSocket::TITOUDPSourceSocket( void )	:		TOption(),		mSourcePort( 0 ){	SetLabel( kOptionID );	SetLength( kOptionDataLength );	int index_i;	// Counter on IP bytes	for (index_i = 0; index_i < 4; index_i++)	{		mSourceIP[index_i] = 0;	}}// --------------------------------------------------------	////	GetSourceIP( UChar [4] )// --------------------------------------------------------	//// Retrieve the destination IP. Copy it from the option data using memcpy.voidTITOUDPSourceSocket::GetSourceIP( UChar outSourceIP[4] ){	(void) ::memcpy( outSourceIP, mSourceIP, sizeof( outSourceIP ) );}#pragma mark *--- Inet Tool UDP Multicast ('iumc') Option ---*// --------------------------------------------------------	////	TITOUDPMulticast( void )// --------------------------------------------------------	//// Also set the group IP to 0,0,0,0 (kGroupIPDefault) and// the extended result to 0.TITOUDPMulticast::TITOUDPMulticast( void )	:		TOption(),		mMulticastRequest( kMulticastRequestDefault ),		mTool( kToolDefault ),		mExtendedResult( 0 ){	SetLabel( kOptionID );	SetLength( kOptionDataLength );	int index_i;	// Counter on IP bytes	for (index_i = 0; index_i < 4; index_i++)	{		mGroupIP[index_i] = kGroupIPDefault >> (index_i * 8);	}}// --------------------------------------------------------	////	SetGroupIP( const UChar [4] )// --------------------------------------------------------	//// Set the destination IP. Copy it to the option data using memcpy.voidTITOUDPMulticast::SetGroupIP( const UChar inGroupIP[4] ){	(void) ::memcpy( mGroupIP, inGroupIP, sizeof( mGroupIP ) );}#pragma mark *--- Inet Tool UDP Broadcast ('iubc') Option ---*// --------------------------------------------------------	////	TITOUDPBroadcast( void )// --------------------------------------------------------	//TITOUDPBroadcast::TITOUDPBroadcast( void )	:		TOption(),		mReceiveBroadcast( kReceiveBroadcastDefault ),		mReceiveMulticast( kReceiveMulticastDefault ),		mEchoMulticast( kEchoMulticastDefault ){	SetLabel( kOptionID );	SetLength( kOptionDataLength );}// ======================================================================= //// Programmers used to batch environments may find it hard to live without //// giant listings; we would find it hard to use them.                      ////                 -- D.M. Ritchie                                         //// ======================================================================= //