/*	File:		Sockets Consts.f	Project:	Waba	Purpose:	Code to grab the link	Written by:	Paul Guyot from waba.io.Socket by Steve Weyer.*/// All functions (GrabLink, GetIP, ReleaseLink) are sync.// The trick with callbacks is to use forks.DefConst( 'kInetEngine,	{// Public:		GrabLink: func()		begin			local kWaitFunc := func(view)			begin				//call kFixRootParent with (view);				while (_status <> 'error and _status <> 'done)				do begin					view:setStatus('vBarber, {barber: true, titleText: SPrintObject(_status)});					sleep(10);				end;			end;						local state := "NIE", view;			_status := 'waiting;			if view := InetOpenConnectionSlip(nil, self, '_connectionSlipCallback)			then begin				view:hide();				view:ModalDialog();			end;			if _status = 'error				then return _error;			_status := 'waiting;			state := "GrabLink";			InetGrabLink(_linkID, self, '_grabLinkCallback);			if DoProgress('vBarber, {_proto: progressOptions, statusText: state}, kWaitFunc) = 'cancelled			then _status := 'error;			if _status = 'error or not _linkID			then return _error;					return nil;		end,				GetIP: func( inHostStr )		begin			local state := "NIE";						local kWaitFunc := func(view)			begin				//call kFixRootParent with (view);				while (_status <> 'error and _status <> 'done)				do begin					view:setStatus('vBarber, {barber: true, titleText: SPrintObject(_status)});					sleep(10);				end;			end;			_status := 'waiting;			state := "DNS:" && inHostStr;			if InetIsValidIPAddressStr( inHostStr )	// e.g., 205.134.252.158			then _address := InetIPStringToAddress( inHostStr );			else begin				DNSGetAddressFromName( inHostStr, self, '_getAddressCallback );				if DoProgress( 'vBarber, {_proto: progressOptions, statusText: state}, kWaitFunc )  = 'cancelled				then _status := 'error;			end;			if _status = 'error or not IsArray(_address)			then return _error;						return nil;		end,		ReleaseLink: func( inLinkID )		begin			InetReleaseLinkVerbose( inLinkID, self, '_releaseLinkCallback );		end,		// Private:		_connectionSlipCallback: func( inWhat )		begin			if inWhat = 'connect				then _status := 'done				else _status := 'error;			// If the symbol is 'connect, you should proceed with the connection;			// if not, the user cancelled the connection.		end,		_grabLinkCallback: func( inLinkID, inStatus, inErr )		begin			if inErr			then begin				 _status := 'error;				 _error := inErr			end			else if inStatus.linkStatus = 'Connected				then begin					_linkID := inLinkID;					_status := 'done;				end				else _status := inStatus.linkStatus;		end,		_getAddressCallback: func( results, inErr )		begin			if inErr				or not results				or Length(results) < 1			then			begin				_error := inErr;				_status := 'error;			end else begin				_address := results[0].resultIPAddress;				_status := 'done;			end;		end,		_releaseLinkCallback: func( inLinkID, inNewStatus, inErr )			nil,	// ignore		_address: nil,		_linkID: nil,		_status: nil,		_error: -1,	// random error				progressOptions: {			closebox: nil,			titleText: "init",			statusText: "waba.io.Socket",			barber: true,		}});