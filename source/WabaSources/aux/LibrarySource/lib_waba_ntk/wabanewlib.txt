// WabaNewLibDefs.txt -- DON'T MODIFY (or copy)/*for a regular Waba application, use app/_templatefor a library extension (i.e., classes to be shared by many applications)make a copy of the project file WabaNewLib.ntkif the name of your Waba lib is mywabalib,then rename the project file mywabalib.ntkin order that your project benefit from later updates,you should not copy or modify the template files: WabaNewLibDefs.txt, WabaNewLib.lytfix the Project:Project Settings to reflect name and symbols- be sure to keep :waba suffix at end of symbol signature- generally a library is in a package. your names should use the name of the package rooti.e,kAppName 	 = mywabalibkAppSymbol   = mywabalib:wabakPackageName = mywabalib:wabaadd your generated files to the project:	mywabalib.cls.txtmake sure they follow this file in build orderthe layout file should be last*/DefineGlobalConstant('kWabaVMSymbol,  	'|vm:waba|);DefineGlobalConstant('kWabaAppSig,		":waba");DefineGlobalConstant('kWabaLibSymbol, 	'waba);		// w/o :waba suffixDefineGlobalConstant('kAppContext, {});		// *** in mywabalib.cls.txtPrint('[kAppSymbol, kAppName, kPackageName]);Print( [kAppSymbol, kAppName, kPackageName]);DefineGlobalConstant('kWabaEmptyGlobal, {lib: {}, });			partData := {};InstallScript := func(partFrame, removeFrame) // copied from WabaTester.kNewtPackAutobegin	// stash a reference in the global:	local gData := GetGlobalVar(kWabaVMSymbol), partData := partFrame.partData;	local libSym := Intern(partData.appName);	// w/o :waba	if not gData	then DefGlobalVar(EnsureInternal(kWabaVMSymbol), gData := EnsureInternal(kWabaEmptyGlobal));	if gData.lib.(libSym)	then GetRoot():Notify(kNotifyAlert, EnsureInternal("Waba Lib"), "name confict:" && libSym);	else begin		gData.lib.(libSym) := partData;		removeFrame.libSym := libSym;		end;	// icon now set at build-time (afterScript)	//partData:?SetExtrasInfo({packageName: kPackageName}, {icon: partData.icon});end;RemoveScript := func(removeFrame) // copied from WabaTester.kNewtPackAuto	RemoveSlot(GetGlobalVar(kWabaVMSymbol).lib, removeFrame.libSym);DefineGlobalConstant('kFixBinary, func (ustr) // OBSOLETE. eventually removeSetClass(SetLength(ustr,Length(ustr)-2), 'binary) // fix class, get rid of null);DefineGlobalConstant('kFixBinaryType, func (ustr, type)SetClass(SetLength(ustr,Length(ustr)-2), type) // fix class, get rid of null);